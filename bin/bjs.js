const { program } = require('commander');
const fs = require('fs');
const path = require('path');
const chokidar = require('chokidar');
const { transpileWithSourceMap } = require('../lib/transpile-ast');
const pkg = require('../package.json');
const { spawn } = require('child_process');
const { ensureDir, doBuild, watchAndBuild, initProject, showKeywords } = require('../lib/utils');

// Commander CLI setup
program
  .name('bjs')
  .version(pkg.version)
  .description('BanglaScript - ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º JavaScript ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ø‡¶Ç‡•§ ‡¶∏‡¶π‡¶ú‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶ï‡ßã‡¶° ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç JavaScript-‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');

// Build command - .bjs ‡¶•‡ßá‡¶ï‡ßá .js ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã
program
  .command('build [files...]')
  .option('-o, --out <dir>', 'Output directory', 'build')
  .option('-w, --watch', 'Watch mode')
  .option('-m, --minify', 'Minify the output JS')
  .description('.bjs ‡¶´‡¶æ‡¶á‡¶≤(‡¶∏) ‡¶•‡ßá‡¶ï‡ßá .js ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã‡•§ ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§')
  .action((files, opts) => {
    if (files.length === 0) {
      console.error('‚ùå ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡¶è‡¶ï‡¶ü‡¶ø .bjs ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¶‡¶ø‡¶®‡•§');
      process.exit(1);
    }
    if (opts.watch) {
      watchAndBuild(files, opts.out, opts.minify);
    } else {
      files.forEach(file => doBuild(file, opts.out, opts.minify));
    }
  });

// Run command - Build ‡¶ï‡¶∞‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶ì
program
  .command('run <file>')
  .option('-o, --out <dir>', 'Output directory', 'build')
  .option('-m, --minify', 'Minify the output JS')
  .option('-a, --args <args...>', 'Arguments to pass to the Node.js process')
  .description('.bjs ‡¶´‡¶æ‡¶á‡¶≤ build ‡¶ï‡¶∞‡ßá Node.js ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶ì')
  .action((file, opts) => {
    const outFile = doBuild(file, opts.out, opts.minify);
    if (!outFile) {
      console.error('‚ùå Build ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
      process.exit(1);
    }
    
    console.log(`\nüöÄ ‡¶ö‡¶≤‡¶õ‡ßá: ${path.basename(outFile)}\n`);
    const nodeArgs = opts.args || [];
    const nodeProc = spawn(process.execPath, [outFile, ...nodeArgs], { stdio: 'inherit' });
    nodeProc.on('close', (code) => {
      if (code !== 0) {
        console.error(`\n‚ùå ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ exit code ${code} ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`);
      }
      process.exit(code);
    });
  });

// Watch command - ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶≤‡ßá auto-build
program
  .command('watch [files...]')
  .option('-o, --out <dir>', 'Output directory', 'build')
  .option('-m, --minify', 'Minify the output JS')
  .description('.bjs ‡¶´‡¶æ‡¶á‡¶≤(‡¶∏) watch ‡¶ï‡¶∞‡ßã ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶≤‡ßá auto-build ‡¶ï‡¶∞‡ßã')
  .action((files, opts) => {
    if (files.length === 0) {
      console.error('‚ùå ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡¶è‡¶ï‡¶ü‡¶ø .bjs ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¶‡¶ø‡¶®‡•§');
      process.exit(1);
    }
    watchAndBuild(files, opts.out, opts.minify);
  });

// Init command - Example ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã
program
  .command('init [name]')
  .description('‡¶®‡¶§‡ßÅ‡¶® BanglaScript ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã')
  .action((name) => {
    initProject(name || 'my-project');
  });

// Info command - Keyword ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
program
  .command('keywords')
  .description('‡¶∏‡¶¨ BanglaScript keywords ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì')
  .action(() => {
    showKeywords();
  });

// New command: Transpile direct code from stdin
program
  .command('transpile')
  .option('-m, --minify', 'Minify the output JS')
  .description('‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø BanglaScript ‡¶ï‡ßã‡¶° ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶¶‡¶ø‡ßü‡ßá JavaScript-‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡ßã (stdin ‡¶•‡ßá‡¶ï‡ßá)')
  .action((opts) => {
    let input = '';
    process.stdin.on('data', chunk => { input += chunk; });
    process.stdin.on('end', () => {
      try {
        const { code } = transpileWithSourceMap(input.trim(), 'stdin.bjs');
        const output = opts.minify ? minifyCode(code) : code;
        console.log(output);
      } catch (error) {
        console.error('‚ùå Transpile ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ' + error.message);
        process.exit(1);
      }
    });
  });

program.parse(process.argv);

// ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶® command ‡¶®‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º, help ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
if (process.argv.length === 2) {
  program.help();
}

// Helper for minification 
function minifyCode(code) {
  const babel = require('@babel/core');
  const result = babel.transformSync(code, {
    presets: ['minify'],
    comments: false
  });
  return result.code;
}