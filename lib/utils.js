const fs = require('fs');
const path = require('path');
const chokidar = require('chokidar');
const { transpileWithSourceMap, KEYWORDS } = require('./transpile-ast');
const { getBanglaKeywords, validateBanglaScript, getCodeStats } = require('./translate-words');

/**
 * File extension check ржХрж░рзЗ ржпрзЗ ржПржЯрж┐ .bjs ржлрж╛ржЗрж▓ ржХрж┐ржирж╛
 */
function isBanglaScriptFile(filename) {
  return path.extname(filename).toLowerCase() === '.bjs';
}

/**
 * Directory ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзЗ (ржирж╛ ржерж╛ржХрж▓рзЗ рждрзИрж░рж┐ ржХрж░рзЗ)
 */
function ensureDir(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    return true;
  }
  return false;
}

/**
 * File ржкржбрж╝рзЗ ржПржмржВ content return ржХрж░рзЗ
 */
function readFile(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    throw new Error(`ржлрж╛ржЗрж▓ ржкржбрж╝рждрзЗ ржмрзНржпрж░рзНрже: ${filePath}\n${error.message}`);
  }
}

/**
 * File рж▓рж┐ржЦрзЗ
 */
function writeFile(filePath, content) {
  try {
    // Ensure directory exists
    const dir = path.dirname(filePath);
    ensureDir(dir);
   
    fs.writeFileSync(filePath, content, 'utf8');
    return true;
  } catch (error) {
    throw new Error(`ржлрж╛ржЗрж▓ рж▓рж┐ржЦрждрзЗ ржмрзНржпрж░рзНрже: ${filePath}\n${error.message}`);
  }
}

/**
 * ржмрж╛ржВрж▓рж╛ ржлрж╛ржЗрж▓ ржирж╛ржо ржерзЗржХрзЗ JavaScript ржлрж╛ржЗрж▓ ржирж╛ржо рждрзИрж░рж┐ ржХрж░рзЗ
 */
function getOutputFilename(inputFile, outputDir = 'build') {
  const basename = path.basename(inputFile, '.bjs');
  return path.join(outputDir, `${basename}.js`);
}

/**
 * Source map filename рждрзИрж░рж┐ ржХрж░рзЗ
 */
function getSourceMapFilename(inputFile, outputDir = 'build') {
  const basename = path.basename(inputFile, '.bjs');
  return path.join(outputDir, `${basename}.js.map`);
}

/**
 * Error ржХрзЗ рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ format ржХрж░рзЗ
 */
function formatError(error, context = {}) {
  const colors = getColors();
  const lines = [];
 
  lines.push(`${colors.red}тЭМ Error:${colors.reset}`);
  lines.push(` ${error.message}`);
 
  if (context.file) {
    lines.push(` File: ${context.file}`);
  }
 
  if (context.line) {
    lines.push(` Line: ${context.line}`);
  }
 
  if (error.stack && context.verbose) {
    lines.push('\nStack trace:');
    lines.push(error.stack);
  }
 
  return lines.join('\n');
}

/**
 * Success message format ржХрж░рзЗ
 */
function formatSuccess(message, details = {}) {
  const colors = getColors();
  const lines = [];
 
  lines.push(`${colors.green}тЬЕ ${message}${colors.reset}`);
 
  if (details.input) {
    lines.push(` Input: ${details.input}`);
  }
 
  if (details.output) {
    lines.push(` Output: ${details.output}`);
  }
 
  if (details.time) {
    lines.push(` Time: ${details.time}ms`);
  }
 
  return lines.join('\n');
}

/**
 * ржХрзЛржб ржерзЗржХрзЗ line number ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗ (error reporting ржПрж░ ржЬржирзНржп)
 */
function getLineNumber(code, position) {
  const lines = code.substring(0, position).split('\n');
  return lines.length;
}

/**
 * Color console output (terminal ржПрж░ ржЬржирзНржп)
 */
function getColors() {
  return {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    dim: '\x1b[2m',
 
    // Foreground colors
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
 
    // Background colors
    bgRed: '\x1b[41m',
    bgGreen: '\x1b[42m',
    bgYellow: '\x1b[43m'
  };
}

/**
 * Build function (CLI ржерзЗржХрзЗ call) - ржЖржкржбрзЗржЯ: minify support, multiple files
 */
function doBuild(file, outDir = 'build', minify = false) {
  const inputFile = path.isAbsolute(file) 
    ? file 
    : path.join(process.cwd(), file);
  
  if (!fs.existsSync(inputFile)) {
    console.error(`тЭМ ржлрж╛ржЗрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐: ${inputFile}`);
    return null;
  }

  if (!isBanglaScriptFile(inputFile)) {
    console.error(`тЭМ ржлрж╛ржЗрж▓ .bjs extension рж╣рждрзЗ рж╣ржмрзЗ: ${inputFile}`);
    return null;
  }

  ensureDir(outDir);

  const code_bjs = readFile(inputFile);
  
  // Basic validation
  const validation = validateBanglaScript(code_bjs);
  if (!validation.valid) {
    validation.errors.forEach(err => {
      console.error(formatError(new Error(err.message), { file: inputFile, line: err.line }));
    });
    return null;
  }

  const base = path.basename(inputFile).replace(/\.bjs$/i, '') || 'main';
  const outJS = path.join(outDir, base + '.js');
  const outMap = path.join(outDir, base + '.js.map');

  const timer = new Timer();
  try {
    console.log(`тЪЩя╕П  Building: ${path.basename(inputFile)}...`);
    
    let { code, map } = transpileWithSourceMap(code_bjs, path.basename(inputFile));
    if (minify) {
      const babel = require('@babel/core');
      const minified = babel.transformSync(code, { presets: ['minify'], comments: false });
      code = minified.code;
    }
    
    writeFile(outJS, code);
    if (map) {
      writeFile(outMap, JSON.stringify(map, null, 2));
    }
    
    const time = timer.elapsed();
    console.log(formatSuccess('рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ', { 
      input: path.basename(inputFile), 
      output: outJS, 
      time 
    }));
    if (map) {
      console.log(`ЁЯУН Source map: ${outMap}`);
    }
    
    // Stats
    const stats = getCodeStats(code_bjs);
    console.log(`ЁЯУК Stats: ${stats.totalLines} lines (${stats.codeLines} code, ${stats.commentLines} comments), ${stats.characters} chars`);
    
    return outJS;
  } catch (err) {
    console.error(formatError(err, { file: inputFile, verbose: true }));
    return null;
  }
}

/**
 * Watch function - ржЖржкржбрзЗржЯ: multiple files, cache for faster rebuild
 */
function watchAndBuild(files, outDir, minify) {
  const inputFiles = files.map(file => path.isAbsolute(file) ? file : path.join(process.cwd(), file));

  inputFiles.forEach(file => {
    if (!fs.existsSync(file)) {
      console.error(`тЭМ ржлрж╛ржЗрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐: ${file}`);
      process.exit(1);
    }
  });

  console.log(`ЁЯСА Watching: ${inputFiles.map(path.basename).join(', ')}`);
  console.log(`ЁЯУБ Output: ${outDir}/`);
  if (minify) console.log(`ЁЯФН Minify: Enabled`);
  console.log(`\nржкрж░рж┐ржмрж░рзНрждржирзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрж┐... (Ctrl+C ржжрж┐ржпрж╝рзЗ ржмржирзНржз ржХрж░рзБржи)\n`);

  // Initial build
  inputFiles.forEach(file => doBuild(file, outDir, minify));

  const watcher = chokidar.watch(inputFiles, { 
    ignoreInitial: true,
    persistent: true,
    usePolling: false, // Optimized for performance
    awaitWriteFinish: { stabilityThreshold: 200, pollInterval: 100 } // Debounce writes
  });

  watcher.on('change', (filePath) => {
    console.log(`\nЁЯУЭ ржкрж░рж┐ржмрж░рзНрждржи рж╕ржирж╛ржХрзНржд: ${path.basename(filePath)}`);
    doBuild(filePath, outDir, minify);
  });

  watcher.on('error', (error) => {
    console.error(`тЭМ Watcher error: ${error}`);
  });

  // Handle process termination
  process.on('SIGINT', () => {
    console.log('\n\nЁЯСЛ Watch mode ржмржирзНржз рж╣ржЪрзНржЫрзЗ...');
    watcher.close();
    process.exit(0);
  });
}

/**
 * Init project - ржЖржкржбрзЗржЯ: ржЖрж░рзЛ advanced example ржпрзЛржЧ (class, async)
 */
function initProject(projectName) {
  const projectDir = path.join(process.cwd(), projectName);
  
  if (fs.existsSync(projectDir)) {
    console.error(`тЭМ ржлрзЛрж▓рзНржбрж╛рж░ '${projectName}' ржЗрждрж┐ржоржзрзНржпрзЗ ржмрж┐ржжрзНржпржорж╛ржи`);
    process.exit(1);
  }

  console.log(`ЁЯУж ржирждрзБржи ржкрзНрж░ржЬрзЗржХрзНржЯ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ: ${projectName}`);
  
  ensureDir(projectDir);
  ensureDir(path.join(projectDir, 'src'));
  ensureDir(path.join(projectDir, 'build'));

  // Example .bjs file рждрзИрж░рж┐ ржХрж░рзЛ (ржЖржкржбрзЗржЯ: class ржПржмржВ async example ржпрзЛржЧ)
  const exampleCode = `// BanglaScript ржЙржжрж╛рж╣рж░ржг ржкрзНрж░рзЛржЧрзНрж░рж╛ржо
// ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ JavaScript рж▓рж┐ржЦрзБржи!

ржЕржирзБрж╖рзНржарж╛ржи рж╢рзБржнрзЗржЪрзНржЫрж╛(ржирж╛ржо) {
  рж▓рж┐ржЦрзЛ("рж╣рзНржпрж╛рж▓рзЛ, " + ржирж╛ржо + "!");
  рж▓рж┐ржЦрзЛ("BanglaScript ржП рж╕рзНржмрж╛ржЧрждржо!");
}

рж╕ржВржЦрзНржпрж╛ ржмржпрж╝рж╕ = рзирзж;
ржмрж╛ржХрзНржп ржирж╛ржо = "ржорж╛рж╣ржорзБржж";

рж╢рзБржнрзЗржЪрзНржЫрж╛(ржирж╛ржо);

ржпржжрж┐ (ржмржпрж╝рж╕ >= рззрзо) {
  рж▓рж┐ржЦрзЛ("ржЖржкржирж┐ ржкрзНрж░рж╛ржкрзНрждржмржпрж╝рж╕рзНржХ");
} ржирж╛рж╣рж▓рзЗ {
  рж▓рж┐ржЦрзЛ("ржЖржкржирж┐ ржирж╛ржмрж╛рж▓ржХ");
}

// рж▓рзБржк ржЙржжрж╛рж╣рж░ржг
ржЬржирзНржп (ржмрж╛ржХрзНржп i = рзз; i <= рзл; i++) {
  рж▓рж┐ржЦрзЛ("рж╕ржВржЦрзНржпрж╛: " + i);
}

// ржлрж╛ржВрж╢ржи ржЙржжрж╛рж╣рж░ржг
ржЕржирзБрж╖рзНржарж╛ржи ржпрзЛржЧржлрж▓(a, b) {
  ржкрзНрж░рзЗрж░ржг a + b;
}

ржмрж╛ржХрзНржп ржлрж▓рж╛ржлрж▓ = ржпрзЛржЧржлрж▓(рззрзж, рзирзж);
рж▓рж┐ржЦрзЛ("ржпрзЛржЧржлрж▓: " + ржлрж▓рж╛ржлрж▓);

// Class ржЙржжрж╛рж╣рж░ржг
рж╢рзНрж░рзЗржгрзА ржорж╛ржирзБрж╖ {
  ржЧржаржи(ржирж╛ржо, ржмржпрж╝рж╕) {
    ржПржЯрж┐.ржирж╛ржо = ржирж╛ржо;
    ржПржЯрж┐.ржмржпрж╝рж╕ = ржмржпрж╝рж╕;
  }
  
  рж╢рзБржнрзЗржЪрзНржЫрж╛() {
    рж▓рж┐ржЦрзЛ("рж╣рзНржпрж╛рж▓рзЛ, ржЖржорж╛рж░ ржирж╛ржо " + ржПржЯрж┐.ржирж╛ржо);
  }
}

ржмрж╛ржХрзНржп ржмрзНржпржХрзНрждрж┐ = ржирждрзБржи ржорж╛ржирзБрж╖("ржЖрж▓рзА", рзйрзж);
ржмрзНржпржХрзНрждрж┐.рж╢рзБржнрзЗржЪрзНржЫрж╛();

// Async ржЙржжрж╛рж╣рж░ржг
ржЕрзНржпрж╛рж╕рж┐ржЩрзНржХ ржЕржирзБрж╖рзНржарж╛ржи рж▓рзЛржб_ржбрж╛ржЯрж╛() {
  ржЕржкрзЗржХрзНрж╖рж╛ ржирждрзБржи ржкрзНрж░рждрж┐ржЬрзНржЮрж╛((рж╕ржлрж▓) => setTimeout(рж╕ржлрж▓, 1000));
  рж▓рж┐ржЦрзЛ("ржбрж╛ржЯрж╛ рж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ!");
}

рж▓рзЛржб_ржбрж╛ржЯрж╛();
`;

  writeFile(
    path.join(projectDir, 'src', 'main.bjs'),
    exampleCode
  );

  // package.json рждрзИрж░рж┐ ржХрж░рзЛ
  const packageJson = {
    name: projectName,
    version: "1.0.0",
    description: "BanglaScript ржкрзНрж░ржЬрзЗржХрзНржЯ",
    scripts: {
      build: "bjs build src/main.bjs",
      run: "bjs run src/main.bjs",
      watch: "bjs watch src/main.bjs"
    },
    keywords: ["banglascript", "bangla"],
    author: "Your Name",
    license: "MIT"
  };

  writeFile(
    path.join(projectDir, 'package.json'),
    JSON.stringify(packageJson, null, 2)
  );

  // README.md рждрзИрж░рж┐ ржХрж░рзЛ (ржЖржкржбрзЗржЯ: ржЖрж░рзЛ details)
  const readme = `# ${projectName}

ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ JavaScript ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ!

## ржмрзНржпржмрж╣рж╛рж░

### Build ржХрж░рзБржи
\`\`\`bash
npm run build
\`\`\`

### ржЪрж╛рж▓рж╛ржи
\`\`\`bash
npm run run
\`\`\`

### Watch mode
\`\`\`bash
npm run watch
\`\`\`

## BanglaScript рж╕ржорзНржкрж░рзНржХрзЗ

BanglaScript ржПрж░ ржорж╛ржзрзНржпржорзЗ ржЖржкржирж┐ ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ JavaScript ржХрзЛржб рж▓рж┐ржЦрждрзЗ ржкрж╛рж░ржмрзЗржиред

### Keywords:
- \`ржмрж╛ржХрзНржп\` = \`let\`
- \`ржзрзНрж░рзБржмржХ\` = \`const\`
- \`ржЕржирзБрж╖рзНржарж╛ржи\` = \`function\`
- \`ржпржжрж┐\` = \`if\`
- \`ржирж╛рж╣рж▓рзЗ\` = \`else\`
- \`ржЬржирзНржп\` = \`for\`
- \`ржпржЦржи\` = \`while\`
- \`рж▓рж┐ржЦрзЛ\` = \`console.log\`
- \`рж╕рждрзНржп\` = \`true\`
- \`ржорж┐ржерзНржпрж╛\` = \`false\`

### ржирждрзБржи ржлрж┐ржЪрж╛рж░:
- Class: \`рж╢рзНрж░рзЗржгрзА\`
- Async: \`ржЕрзНржпрж╛рж╕рж┐ржЩрзНржХ\`, \`ржЕржкрзЗржХрзНрж╖рж╛\`

ржЖрж░ржУ ржЬрж╛ржирждрзЗ: \`bjs keywords\`
`;

  writeFile(
    path.join(projectDir, 'README.md'),
    readme
  );

  console.log(`тЬЕ ржкрзНрж░ржЬрзЗржХрзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ!`);
  console.log(`\nржкрж░ржмрж░рзНрждрзА ржкржжржХрзНрж╖рзЗржк:`);
  console.log(`  cd ${projectName}`);
  console.log(`  bjs run src/main.bjs`);
  console.log(`\nржмрж╛ watch mode ржП ржЪрж╛рж▓рж╛ржи:`);
  console.log(`  bjs watch src/main.bjs\n`);
}

/**
 * Show keywords
 */
function showKeywords() {
  console.log('\nЁЯУЪ BanglaScript Keywords:\n');
  console.log('ржмрж╛ржВрж▓рж╛ тЖТ JavaScript\n');
  console.log('тФА'.repeat(50));
  
  const categories = getBanglaKeywords();

  for (const [category, words] of Object.entries(categories)) {
    console.log(`\n${category}:`);
    words.forEach(word => {
      if (KEYWORDS[word]) {
        console.log(`  ${word.padEnd(20)} тЖТ ${KEYWORDS[word]}`);
      }
    });
  }

  console.log('\n' + 'тФА'.repeat(50));
  console.log('\nрж╕ржорзНржкрзВрж░рзНржг рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрждрзЗ documentation ржжрзЗржЦрзБржиред');
  console.log('ржЙржжрж╛рж╣рж░ржг ржкрзНрж░ржЬрзЗржХрзНржЯ рждрзИрж░рж┐ ржХрж░рждрзЗ: bjs init my-project\n');
}

/**
 * Performance timing helper
 */
class Timer {
  constructor() {
    this.start = Date.now();
  }
 
  elapsed() {
    return Date.now() - this.start;
  }
 
  reset() {
    this.start = Date.now();
  }
}

module.exports = { 
  ensureDir, 
  doBuild, 
  watchAndBuild, 
  initProject, 
  showKeywords,
  getColors,
  formatError,
  formatSuccess,
  Timer,
  validateBanglaScript,
  getCodeStats,
  isBanglaScriptFile,
  readFile,
  writeFile,
  getOutputFilename,
  getSourceMapFilename
};