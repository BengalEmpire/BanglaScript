const { program } = require('commander');
const fs = require('fs');
const path = require('path');
const chokidar = require('chokidar');
const { transpileWithSourceMap } = require('./transpile-ast');
const pkg = require('../package.json');
const { spawn } = require('child_process');
const { ensureDir, doBuild, watchAndBuild, initProject, showKeywords } = require('./utils');

// Commander CLI setup
program
  .name('bjs')
  .version(pkg.version)
  .description('BanglaScript - ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º JavaScript ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ø‡¶Ç');

// Build command - .bjs ‡¶•‡ßá‡¶ï‡ßá .js ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã
program
  .command('build <file>')
  .option('-o, --out <dir>', 'Output directory', 'build')
  .option('-w, --watch', 'Watch mode')
  .description('.bjs ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá .js ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã')
  .action((file, opts) => {
    if (opts.watch) {
      watchAndBuild(file, opts.out);
    } else {
      doBuild(file, opts.out);
    }
  });

// Run command - Build ‡¶ï‡¶∞‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶ì
program
  .command('run <file>')
  .option('-o, --out <dir>', 'Output directory', 'build')
  .description('.bjs ‡¶´‡¶æ‡¶á‡¶≤ build ‡¶ï‡¶∞‡ßá Node.js ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶ì')
  .action((file, opts) => {
    const outFile = doBuild(file, opts.out);
    if (!outFile) {
      console.error('‚ùå Build ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
      process.exit(1);
    }
    
    console.log(`\nüöÄ ‡¶ö‡¶≤‡¶õ‡ßá: ${path.basename(outFile)}\n`);
    const nodeProc = spawn(process.execPath, [outFile], { stdio: 'inherit' });
    nodeProc.on('close', (code) => {
      if (code !== 0) {
        console.error(`\n‚ùå ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ exit code ${code} ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`);
      }
      process.exit(code);
    });
  });

// Watch command - ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶≤‡ßá auto-build
program
  .command('watch <file>')
  .option('-o, --out <dir>', 'Output directory', 'build')
  .description('.bjs ‡¶´‡¶æ‡¶á‡¶≤ watch ‡¶ï‡¶∞‡ßã ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶≤‡ßá auto-build ‡¶ï‡¶∞‡ßã')
  .action((file, opts) => {
    watchAndBuild(file, opts.out);
  });

// Init command - Example ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã
program
  .command('init [name]')
  .description('‡¶®‡¶§‡ßÅ‡¶® BanglaScript ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã')
  .action((name) => {
    initProject(name || 'my-project');
  });

// Info command - Keyword ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
program
  .command('keywords')
  .description('‡¶∏‡¶¨ BanglaScript keywords ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì')
  .action(() => {
    showKeywords();
  });

program.parse(process.argv);

// ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶® command ‡¶®‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º, help ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
if (process.argv.length === 2) {
  program.help();
}